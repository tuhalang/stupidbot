// Code generated by sqlc. DO NOT EDIT.
// source: question.sql

package db

import (
	"context"
	"database/sql"
)

const listQuestion = `-- name: ListQuestion :many
SELECT id, topic_code, content_text, content_image, correct_answer, difficult, subject_code
FROM question
WHERE topic_code = $1
and subject_code = $2
ORDER BY difficult
LIMIT $3 OFFSET $4
`

type ListQuestionParams struct {
	TopicCode   sql.NullInt64  `json:"topic_code"`
	SubjectCode sql.NullString `json:"subject_code"`
	Limit       int32          `json:"limit"`
	Offset      int32          `json:"offset"`
}

func (q *Queries) ListQuestion(ctx context.Context, arg ListQuestionParams) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, listQuestion,
		arg.TopicCode,
		arg.SubjectCode,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.TopicCode,
			&i.ContentText,
			&i.ContentImage,
			&i.CorrectAnswer,
			&i.Difficult,
			&i.SubjectCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
