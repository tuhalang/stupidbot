// Code generated by sqlc. DO NOT EDIT.
// source: conversation.sql

package db

import (
	"context"
)

const createConversation = `-- name: CreateConversation :one
INSERT INTO conversation(user_id, mentor_id)
VALUES ($1, $2)
RETURNING id, user_id, mentor_id, valid_time, status
`

type CreateConversationParams struct {
	UserID   string `json:"user_id"`
	MentorID string `json:"mentor_id"`
}

func (q *Queries) CreateConversation(ctx context.Context, arg CreateConversationParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, createConversation, arg.UserID, arg.MentorID)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MentorID,
		&i.ValidTime,
		&i.Status,
	)
	return i, err
}

const getConversationByMentor = `-- name: GetConversationByMentor :one
SELECT id, user_id, mentor_id, valid_time, status
FROM conversation
WHERE mentor_id = $1
AND status = 1
AND valid_time > now()
`

func (q *Queries) GetConversationByMentor(ctx context.Context, mentorID string) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getConversationByMentor, mentorID)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MentorID,
		&i.ValidTime,
		&i.Status,
	)
	return i, err
}

const getConversationByUser = `-- name: GetConversationByUser :one
SELECT id, user_id, mentor_id, valid_time, status
FROM conversation
WHERE user_id = $1
AND status = 1
AND valid_time > now()
`

func (q *Queries) GetConversationByUser(ctx context.Context, userID string) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getConversationByUser, userID)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MentorID,
		&i.ValidTime,
		&i.Status,
	)
	return i, err
}

const invalidConversation = `-- name: InvalidConversation :exec
UPDATE conversation
SET status = 0
WHERE id = $1
`

func (q *Queries) InvalidConversation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, invalidConversation, id)
	return err
}
