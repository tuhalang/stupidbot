// Code generated by sqlc. DO NOT EDIT.
// source: scripts.sql

package db

import (
	"context"
	"database/sql"
)

const getScriptByCode = `-- name: GetScriptByCode :one
SELECT  code, action_processor, message_failed, message_image, message_succeed, message_text, order_number, parent_code
FROM scripts
WHERE code = $1
LIMIT 1
`

func (q *Queries) GetScriptByCode(ctx context.Context, code string) (Script, error) {
	row := q.db.QueryRowContext(ctx, getScriptByCode, code)
	var i Script
	err := row.Scan(
		&i.Code,
		&i.ActionProcessor,
		&i.MessageFailed,
		&i.MessageImage,
		&i.MessageSucceed,
		&i.MessageText,
		&i.OrderNumber,
		&i.ParentCode,
	)
	return i, err
}

const getScriptByParent = `-- name: GetScriptByParent :many
SELECT code, action_processor, message_failed, message_image, message_succeed, message_text, order_number, parent_code
FROM scripts
WHERE parent_code = $1
`

func (q *Queries) GetScriptByParent(ctx context.Context, parentCode sql.NullString) ([]Script, error) {
	rows, err := q.db.QueryContext(ctx, getScriptByParent, parentCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Script
	for rows.Next() {
		var i Script
		if err := rows.Scan(
			&i.Code,
			&i.ActionProcessor,
			&i.MessageFailed,
			&i.MessageImage,
			&i.MessageSucceed,
			&i.MessageText,
			&i.OrderNumber,
			&i.ParentCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
