// Code generated by sqlc. DO NOT EDIT.
// source: session_context.sql

package db

import (
	"context"
)

const createSessionContext = `-- name: CreateSessionContext :one
INSERT INTO session_context (user_id, script_code)
VALUES ($1, $2)
RETURNING id, user_id, script_code, valid_time
`

type CreateSessionContextParams struct {
	UserID     string `json:"user_id"`
	ScriptCode string `json:"script_code"`
}

func (q *Queries) CreateSessionContext(ctx context.Context, arg CreateSessionContextParams) (SessionContext, error) {
	row := q.db.QueryRowContext(ctx, createSessionContext, arg.UserID, arg.ScriptCode)
	var i SessionContext
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ScriptCode,
		&i.ValidTime,
	)
	return i, err
}

const getLatestSession = `-- name: GetLatestSession :many
SELECT id, user_id, script_code, valid_time
FROM session_context
WHERE user_id = $1
AND valid_time > now()
ORDER BY valid_time desc
`

func (q *Queries) GetLatestSession(ctx context.Context, userID string) ([]SessionContext, error) {
	rows, err := q.db.QueryContext(ctx, getLatestSession, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionContext
	for rows.Next() {
		var i SessionContext
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ScriptCode,
			&i.ValidTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
